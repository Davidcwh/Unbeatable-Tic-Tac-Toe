{"version":3,"sources":["Board.js","Game.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","winner","x","y","this","slice","gameStatus","GameStatus","ONGOING","engine","updateGameStatus","gameStatus1","makeNextMove","DRAW","setState","computerMove","getBestMove","gameStatus2","handleClick","boardReset","toggleBoardReset","status","renderSquare","React","Component","Game","TicTacToeEngine","Player","PLAYER_ONE","Helmet","resetGame","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c2f4745.chunk.js","sourcesContent":["import React from 'react';\r\nimport {GameStatus} from 'tic-tac-toe-minimax-engine'\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        squares: Array(9).fill(null),\r\n        winner: null\r\n      }\r\n    }\r\n\r\n    handleClick(x, y) {\r\n      const squares = this.state.squares.slice();\r\n      if(squares[(y * 3 + x)] !== null || this.props.gameStatus !== GameStatus.ONGOING) { // check if square was already taken\r\n        return;\r\n      }\r\n\r\n      const engine = this.props.engine;\r\n      const updateGameStatus = this.props.updateGameStatus;\r\n\r\n      // Make human player move\r\n      const gameStatus1 = engine.makeNextMove(x, y);\r\n      squares[(y * 3 + x)] = 'X';\r\n      updateGameStatus(gameStatus1);\r\n      if(gameStatus1 !== GameStatus.ONGOING) {\r\n        let winner = this.state.winner;\r\n        if(gameStatus1 === GameStatus.DRAW) {\r\n          winner = 'none';\r\n        } else {\r\n          winner = 'X';\r\n        }\r\n\r\n        this.setState({squares, winner});\r\n        return;\r\n      }\r\n\r\n      // Make computer player move\r\n      const computerMove = engine.getBestMove();\r\n      const gameStatus2 = engine.makeNextMove(computerMove.x, computerMove.y);\r\n      squares[(computerMove.y * 3 + computerMove.x)] = 'O';\r\n      updateGameStatus(gameStatus2);\r\n      let winner = this.state.winner;\r\n      if(gameStatus2 === GameStatus.DRAW) {\r\n        winner = 'none';\r\n      } else if(gameStatus2 !== GameStatus.ONGOING){\r\n        winner = 'O';\r\n      }\r\n      this.setState({squares, winner});\r\n    }\r\n\r\n    renderSquare(x, y) {\r\n        return <Square value={this.state.squares[(y * 3 + x)]} onClick={() => this.handleClick(x, y)}/>;\r\n    }\r\n\r\n    render() {\r\n        if(this.props.boardReset) {\r\n          this.props.toggleBoardReset(false);\r\n          this.setState({\r\n            squares: Array(9).fill(null),\r\n            winner: null\r\n          })\r\n        };\r\n\r\n\r\n        const status = this.state.winner === 'X' \r\n                        ? 'You Win! :)' \r\n                        : this.state.winner === 'O' \r\n                          ? 'Computer Wins! :('\r\n                          : this.state.winner === 'none' \r\n                            ? 'Draw! :/'\r\n                            : 'Unbeatable Tic Tac Toe';\r\n    \r\n        return (\r\n          <div>\r\n            <div className=\"status\">{status}</div>\r\n            <div className=\"board\">\r\n              <div className=\"board-row\">\r\n                {this.renderSquare(0, 0)}\r\n                {this.renderSquare(1, 0)}\r\n                {this.renderSquare(2, 0)}\r\n              </div>\r\n              <div className=\"board-row\">\r\n                {this.renderSquare(0, 1)}\r\n                {this.renderSquare(1, 1)}\r\n                {this.renderSquare(2, 1)}\r\n              </div>\r\n              <div className=\"board-row\">\r\n                {this.renderSquare(0, 2)}\r\n                {this.renderSquare(1, 2)}\r\n                {this.renderSquare(2, 2)}\r\n              </div>\r\n            </div>\r\n           \r\n          </div>\r\n        );\r\n      }\r\n}","import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './Board';\nimport TicTacToeEngine, {Player, GameStatus} from 'tic-tac-toe-minimax-engine';\nimport {Helmet} from 'react-helmet';\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const engine = new TicTacToeEngine(Player.PLAYER_ONE)\n    this.state = {\n      engine,\n      gameStatus: GameStatus.ONGOING,\n      boardReset: false\n    }\n  }\n\n  resetGame() {\n    this.setState({\n      engine: new TicTacToeEngine(Player.PLAYER_ONE),\n      gameStatus: GameStatus.ONGOING,\n      boardReset: true\n    })\n  }\n\n  updateGameStatus(gameStatus) {\n    this.setState({gameStatus});\n  }\n\n  toggleBoardReset(value) {\n    this.setState({boardReset: value});\n  }\n\n  render() {\n    return (\n      <>\n      <Helmet>\n        <title>Tic Tac Toe</title>\n      </Helmet>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            engine={this.state.engine} \n            gameStatus={this.state.gameStatus}\n            updateGameStatus={(status) => this.updateGameStatus(status)}\n            boardReset={this.state.boardReset}\n            toggleBoardReset={(value) => this.toggleBoardReset(value)}/>\n        </div>\n        <div className=\"game-info\">\n          {this.state.gameStatus !== GameStatus.ONGOING && \n            <button onClick={() => this.resetGame()}>Start New Game</button>\n            }\n        </div>\n        <div>\n          Computer AI Player implemented using <a href=\"https://www.npmjs.com/package/tic-tac-toe-minimax-engine\" target=\"_blank\" rel=\"noreferrer\">minimax engine package</a>\n        </div>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}